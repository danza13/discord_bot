#!/usr/bin/env python
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Discord‚Äë–±–æ—Ç‚Äë–ø—Ä–æ–≥—Ä–∞–≤–∞—á ¬´–ø—ñ–¥¬†–∫–ª—é—á¬ª (discord.py¬†2.5.x¬†+¬†yt‚Äëdlp)
# –ü—Ä–∞—Ü—é—î —É Native¬†Run‚Äëtime¬†Render –±–µ–∑ apt‚Äëget —Ç–∞ –±–µ–∑ Docker
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  ‚öô  –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (requirements.txt):
#      discord.py[voice]==2.5.2
#      yt-dlp>=2025.04  # —Å–≤—ñ–∂–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–∞—Ç—á–µ–º –ø—Ä–æ—Ç–∏¬†HTTP¬†429
#      PyNaCl>=1.5
#
#  üîë  –£ Render ‚Üí Environment:
#      DISCORD_BOT_TOKEN   = <—Ç–æ–∫–µ–Ω>
#      YTDLP_COOKIES_FILE  = youtube_cookies.txt   (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
#      ENABLE_MSG_CONTENT  = false                 (true, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ !–ø—Ä–µ—Ñ—ñ–∫—Å‚Äë–∫–æ–º–∞–Ω–¥–∏)
#
#  üõë  –£ Discord¬†Dev¬†Portal –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –±–æ—Ç–∞ —É–≤—ñ–º–∫–Ω—ñ—Ç—å:
#      ‚Ä¢ MESSAGE¬†CONTENT¬†INTENT (–ª–∏—à–µ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ) —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å¬†Save.
#
#  üöÄ  Build¬†Command:  pip install -r requirements.txt
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import asyncio
import os
import traceback
from typing import Dict, List, Optional

import discord
from discord import app_commands
from discord.ext import commands
import yt_dlp

# ‚ï≠‚îÄ‚ï¥ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
MAX_DEFER_SECONDS = 2.5          # —Å–∫—ñ–ª—å–∫–∏ ¬´–¥—É–º–∞—î–º–æ¬ª –¥–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
TEST_GUILD_ID = int(os.getenv("TEST_GUILD_ID", "0"))  # –º–∏—Ç—Ç—î–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Slash‚Äë–∫–æ–º–∞–Ω–¥
COOKIES_PATH = os.getenv("YTDLP_COOKIES_FILE")        # —Ñ–∞–π–ª —ñ–∑ cookie ‚Äî¬†–ø—Ä–∏–±–∏—Ä–∞—î¬†429
ENABLE_MSG_CONTENT = os.getenv("ENABLE_MSG_CONTENT", "false").lower() == "true"
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ


# ‚ï≠‚îÄ‚ï¥ yt‚Äëdlp: —î–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
async def extract_info(url_or_query: str) -> Optional[dict]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î InfoDict –∞–±–æ None. –û–±—Ä–æ–±–ª—è—î HTTP¬†429 —Ç–∞ DRM."""
    ydl_opts = {
        "format": "bestaudio/best",
        "quiet": True,
        "noplaylist": True,
        "default_search": "ytsearch",
        "source_address": "0.0.0.0",          # –∫–µ—à –æ–±—Ö–æ–¥—É rate‚Äëlimit
        "http_headers": {
            "User-Agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/124.0.0.0 Safari/537.36"
            )
        },
        "cookiesfrombrowser": "chrome" if COOKIES_PATH is None else None,
        "cookiefile": COOKIES_PATH,
        "ignoreerrors": True,
    }

    loop = asyncio.get_running_loop()
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = await loop.run_in_executor(
                None, lambda: ydl.extract_info(url_or_query, download=False)
            )
        except yt_dlp.utils.DownloadError as e:
            print(f"[yt‚Äëdlp] –ø–æ–º–∏–ª–∫–∞: {e}")
            return None

    if not info:
        return None

    # –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –ø–ª–µ–π–ª–∏—Å—Ç–∞ / –ø–æ—à—É–∫—É
    if "entries" in info:
        info = next((e for e in info["entries"] if e), None)

    # DRM¬†‚Äî¬†–≤—ñ–¥–∫–∏–¥–∞—î–º–æ
    if info and info.get("drm") is True:
        return None
    return info


# ‚ï≠‚îÄ‚ï¥ –ú–æ–¥–µ–ª—å —Ç—Ä–µ–∫—É —Ç–∞ –ø–ª–µ—î—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ Guild ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
class Song:
    def __init__(self, info: dict):
        self.title = info.get("title", "Untitled")
        self.duration = int(info.get("duration", 0))
        self.source_url = info["url"]
        self.webpage_url = info.get("webpage_url")

    def __str__(self) -> str:
        m, s = divmod(self.duration, 60)
        return f"{self.title} ({m}:{s:02d})"


class MusicPlayer:
    def __init__(self):
        self.queue: List[Song] = []
        self.current: Optional[Song] = None
        self.voice: Optional[discord.VoiceClient] = None
        self.is_paused = False

    # —É—Ç–∏–ª—ñ—Ç–∏
    def enqueue(self, song: Song) -> int:
        self.queue.append(song)
        return len(self.queue)

    def next(self):
        self.current = self.queue.pop(0) if self.queue else None

    def disconnect(self):
        if self.voice and self.voice.is_connected():
            coro = self.voice.disconnect()
            asyncio.create_task(coro)


players: Dict[int, MusicPlayer] = {}


def get_player(guild: discord.Guild) -> MusicPlayer:
    if guild.id not in players:
        players[guild.id] = MusicPlayer()
    return players[guild.id]


# ‚ï≠‚îÄ‚ï¥ Intents —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
intents = discord.Intents.default()
intents.message_content = ENABLE_MSG_CONTENT
bot = commands.Bot(command_prefix="!" if ENABLE_MSG_CONTENT else commands.when_mentioned, intents=intents)


@bot.event
async def on_ready():
    print(f"‚úÖ –£–≤—ñ–π—à–ª–∞ —è–∫ {bot.user} | –ì—ñ–ª—å–¥—ó: {len(bot.guilds)}")
    try:
        if TEST_GUILD_ID:
            test = discord.Object(id=TEST_GUILD_ID)
            bot.tree.copy_global_to(guild=test)
            await bot.tree.sync(guild=test)
            print("üîÑ Slash‚Äë–∫–æ–º–∞–Ω–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –¥–ª—è TEST_GUILD_ID")
        else:
            synced = await bot.tree.sync()
            print(f"üîÑ Slash‚Äë–∫–æ–º–∞–Ω–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ: {len(synced)}")
    except Exception as e:
        print("‚ùå Sync error:", e)


# ‚ï≠‚îÄ‚ï¥ –ì–æ–ª–æ–≤–Ω—ñ Slash‚Äë–∫–æ–º–∞–Ω–¥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
@app_commands.command(name="play", description="–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫")
@app_commands.describe(url="URL –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
async def play_cmd(inter: discord.Interaction, url: str):
    await inter.response.send_message("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç—Ä–µ–∫‚Ä¶")
    msg = await inter.original_response()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Voice‚Äë—Å—Ç–∞–Ω—É
    if not (vs := inter.user.voice) or not vs.channel:
        return await msg.edit(content="‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–π–¥—ñ—Ç—å —É –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª.")

    player = get_player(inter.guild)
    if not player.voice or not player.voice.is_connected():
        player.voice = await vs.channel.connect()
    elif player.voice.channel.id != vs.channel.id:
        await player.voice.move_to(vs.channel)

    info = await extract_info(url)
    if not info:
        return await msg.edit(content="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—É–¥—ñ–æ (DRM, 429 —á–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è).")

    song = Song(info)
    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î
    if not player.voice.is_playing() and not player.is_paused and player.current is None:
        player.current = song
        await _start_playback(player, inter)
        await msg.edit(content=f"‚ñ∂Ô∏è –ó–∞—Ä–∞–∑ –≥—Ä–∞—î: **{song}**")
    else:
        pos = player.enqueue(song)
        await msg.edit(content=f"‚ûï –î–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É –ø—ñ–¥ ‚Ññ¬†{pos}: **{song.title}**")


async def _start_playback(player: MusicPlayer, inter: discord.Interaction):
    if not player.current:
        return

    src = discord.FFmpegPCMAudio(
        player.current.source_url,
        before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
        options="-vn",
    )

    def after(err):
        if err:
            print("‚ö†Ô∏è FFmpeg error:", err)
        asyncio.run_coroutine_threadsafe(_after_song(player, inter), bot.loop)

    player.voice.play(src, after=after)


async def _after_song(player: MusicPlayer, inter: discord.Interaction):
    player.next()
    if player.current:
        await _start_playback(player, inter)
    else:
        await asyncio.sleep(30)  # —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ‚Äë–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if player.voice and not player.voice.is_playing():
            await player.voice.disconnect()


@app_commands.command(description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫")
async def skip(inter: discord.Interaction):
    player = get_player(inter.guild)
    if player.voice and player.voice.is_playing():
        player.voice.stop()
        await inter.response.send_message("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ", ephemeral=True)
    else:
        await inter.response.send_message("–ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î", ephemeral=True)


@app_commands.command(description="–ü–∞—É–∑–∞ / –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è")
async def pause(inter: discord.Interaction):
    player = get_player(inter.guild)
    if not player.voice:
        return await inter.response.send_message("–ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ", ephemeral=True)

    if player.voice.is_playing():
        player.voice.pause()
        player.is_paused = True
        await inter.response.send_message("‚è∏Ô∏è –ü–∞—É–∑–∞", ephemeral=True)
    elif player.is_paused:
        player.voice.resume()
        player.is_paused = False
        await inter.response.send_message("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ", ephemeral=True)
    else:
        await inter.response.send_message("–ù–µ–º–∞—î —á–æ–≥–æ —Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ –ø–∞—É–∑—É", ephemeral=True)


@app_commands.command(description="–ó—É–ø–∏–Ω–∏—Ç–∏ —Ç–∞ –≤–∏–π—Ç–∏ –∑ –∫–∞–Ω–∞–ª—É")
async def stop(inter: discord.Interaction):
    player = get_player(inter.guild)
    player.queue.clear()
    player.current = None
    player.disconnect()
    await inter.response.send_message("‚èπÔ∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ —ñ –±–æ—Ç –ø–æ–∫–∏–Ω—É–≤ –∫–∞–Ω–∞–ª", ephemeral=True)


@app_commands.command(description="–ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≥—É")
async def queue(inter: discord.Interaction):
    player = get_player(inter.guild)
    desc = [f"**–ó–∞—Ä–∞–∑ –≥—Ä–∞—î:** {player.current}" if player.current else "**–ù—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î**"]

    if player.queue:
        desc.append("\n**–ß–µ—Ä–≥–∞:**")
        desc += [f"{i+1}. {s}" for i, s in enumerate(player.queue)]
    else:
        desc.append("\n–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")

    await inter.response.send_message("\n".join(desc), ephemeral=True)


@app_commands.command(description="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–∫ —ñ–∑ —á–µ—Ä–≥–∏")
@app_commands.describe(index="–ù–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1")
async def remove(inter: discord.Interaction, index: int):
    player = get_player(inter.guild)
    if 1 <= index <= len(player.queue):
        song = player.queue.pop(index - 1)
        await inter.response.send_message(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: **{song.title}**", ephemeral=True)
    else:
        await inter.response.send_message("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å", ephemeral=True)


# ‚ï≠‚îÄ‚ï¥ –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–ª—é—á–µ–Ω—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
@bot.tree.error
async def on_app_error(inter: discord.Interaction, error: app_commands.AppCommandError):
    original = getattr(error, "original", error)
    traceback.print_exception(type(original), original, original.__traceback__)
    if inter.response.is_done():
        await inter.followup.send(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {original}", ephemeral=True)
    else:
        await inter.response.send_message(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {original}", ephemeral=True)


# ‚ï≠‚îÄ‚ï¥ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
if __name__ == "__main__":
    token = os.getenv("DISCORD_BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ DISCORD_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    bot.run(token)
